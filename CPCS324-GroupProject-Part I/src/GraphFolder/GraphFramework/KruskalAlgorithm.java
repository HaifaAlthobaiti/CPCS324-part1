/*
CPCS324 Group Project | Phase1 
Alaa Algamdi ------2007156 | Section B0B 
Raghed alharbi -----2006518 | Section B0B 
Haifa Althobait-----2010445 | Section B8
Sara Alshaikh-------2005499 | Section B0B 

*/
package GraphFolder.GraphFramework;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

    public class KruskalAlgorithm extends MSTAlgorithm {
    private List<Edge> edgeList = new ArrayList<>();
    private Map<Vertex, Vertex> parentMap = new HashMap<>();

    public KruskalAlgorithm(Graph graph) {
        MSTResultList = new ArrayList<>();
    }

    
    
    private int totalWeight = 0;
    @Override
    public void findMinimumSpanningTree(Graph graph) {
        
        // Loop through every vertex in the graph,to add all adjacent edges of the current vertex to the edgeList
        for (int i = 0; i < graph.getVerticesNo(); i++) {
            Vertex MyVertex = graph.getVertex(i);
            edgeList.addAll(MyVertex.getAdjList());
            parentMap.put(MyVertex, MyVertex);// Set the parent of the current vertex to itself in the parentMap
        }
        
        
          // Sort the edgeList in non-decreasing order of weight
        edgeList.sort((e1, e2) -> Integer.compare(e1.getWeight(), e2.getWeight()));

        
        // Loop through each edge in the sorted edgeList
        for (Edge edge : edgeList) {
            // Get the source and target vertices of the current edge
            Vertex source = edge.getSource();
            Vertex target = edge.getDestination();

            // Check if the source and target vertices belong to different sets
            if (find(source) != find(target)) {
                union(source, target);// If they do, merge the sets using the union method
                MSTResultList.add(edge); // Add the current edge to the MSTResultList
            }
        }
        
        //Loop through each edge in the MSTResultList, to add the weight of the current edge to the totalWeight variable
        for (Edge edge : MSTResultList) {
            totalWeight += edge.getWeight();
        }
        
       
    }

    public int getTotalWeight() {
        return totalWeight;
    }
    
    

        /**
         * Merges the sets that contain the given vertices in the union-find
         * data structure. It uses the find method to find the root vertices of
         * the sets containing the input vertices, and then sets the parent of
         * one root vertex to the other root vertex.
         *
         * @param vertex1 the first vertex
         * @param vertex2 the second vertex
         */
    public void union(Vertex vertex1, Vertex vertex2) {
        // Find the root vertices of the sets containing vertex1 and vertex2 using the find method,
        Vertex root1 = find(vertex1);
        Vertex root2 = find(vertex2);
        
        // Set the parent of one root vertex to the other root vertex in the parentMap
         parentMap.put(root1, root2);
    }
     /**
         * Finds the parent vertex of a given vertex in the union-find data
         * structure. If the given vertex is the root of a set, it returns
         * itself. Otherwise, it recursively finds the root of the parent
         * vertex.
         *
         * @param vertex the vertex to find the parent of
         * @return the parent vertex of the given vertex
         */
        public Vertex find(Vertex vertex) {
        
        Vertex parent = parentMap.get(vertex);
        // If the parent vertex is the same as the given vertex, it is the root of a set
        if (parent == vertex) {
            return vertex;
        } else { // Otherwise, recursively find the root of the parent verte
            return find(parent);
        }
    }
    
    @Override
    public void displayResultingMST() {
        

        System.out.println("The minimum spanning tree generated by Kruskal's algorithm is:\n");

        for (Edge edge : MSTResultList) {
           edge.displayInfo();
        }

        System.out.println("\nThe cost of the designed phone network is: " + totalWeight);
    }

    
}
